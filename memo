#!/usr/bin/env bash
# memo : markdown形式のメモを管理する
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Environment
# -----------------------------------------------------------------------------
readonly ME="$(basename ${0})"
readonly VERSION="1.0"
readonly MEMO_DIR="${MARKDOWN_DIR}/memo"

usage_exit() {

[[ -n "${1}" ]] && echo "${1}"

cat <<EOF >&2
Usage:
  ${ME} [-p|-h|-v|-c] file_pattern

Options:
  --help,     -h    print this
  --version,  -v    print ${ME} version
  --print,    -p    print all memo file
  --create,   -c    create new memo

Description:
  markdown形式のメモを管理する
EOF

exit 1
}

version() {
  echo "${VERSION}"
}

# -----------------------------------------------------------------------------
# Core function
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# markdownファイルからpecoへ表示する文を整形して出力する
# Globals:
#   None
# Arguments:
#   file_name         ファイル名 
# Returns:
#   formated_string   整形された文
# -----------------------------------------------------------------------------
fetch_markdown_info() {
  cat "${1}" |
  sed -n '1p' |
  sed -E 's/^# (.*)$/\1/g' |
  xargs -I{} printf "%-20s %-20s\n" "$(basename "${1}")" {}
}

# -----------------------------------------------------------------------------
# メモファイルを一覧表示する
# Globals:
#   MEMO_DIR
# Arguments:
#   None
# Returns:
#   memo      メモファイルの一覧
# -----------------------------------------------------------------------------
print_all_memos() {
  local IFS=$'\n'

  for f in $(find . -maxdepth 1 -type f | grep -E '^.*\.md$'); do
    fetch_markdown_info "${f}" &
  done |
  sort -k1

  exit 0
}

# -----------------------------------------------------------------------------
# 新しいメモを作成する
# Globals:
#   MEMO_DIR
# Arguments:
#   MEMO_FILENAME
# Returns:
#   None
# -----------------------------------------------------------------------------
# TODO: 本来はサブコマンドを作るべき
create_memo() {
  local memo_filename="${1}"

  [[ -z "${memo_filename}" ]] && usage_exit

  if [[ ! "${memo_filename}" =~ ^.*.md$ ]]; then
    memo_filename="${memo_filename}.md"
  fi
  
  [[ -f "${memo_filename}" ]] && usage_exit ""${memo_filename}"は存在します"

  cat <<EOF > "${memo_filename}"
# ${1%.md}について

## 
EOF

  vim "${memo_filename}"

  exit 0
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
main() {
local memo_filename=
local -r SEARCH_PATTERN="${1}"
local searched_files=
local create_flg='false'

cd "${MEMO_DIR}"

# -----------------------------------------------------------------------------
# Option parse
# -----------------------------------------------------------------------------
while getopts 'pvhc-:' OPT 2> /dev/null
do
  case $OPT in
    # long options
    -)
      case "${OPTARG}" in
        help) usage_exit 
          ;;
        version) version
          ;;
        print) print_all_memos
          ;;
        create) create_flg='true'
          ;;
        *) usage_exit
          ;;
      esac
        ;;

    # short options
    h) usage_exit
      ;;
    v) version
      ;;
    p) print_all_memos
      ;;
    c) create_flg='true'
      ;;
    \?) usage_exit
      ;;
  esac
done
shift $((OPTIND - 1))

# -----------------------------------------------------------------------------
# Main process
# -----------------------------------------------------------------------------
local IFS=$'\n'

"${create_flg}" && create_memo "${1}"

if [[ -n "${SEARCH_PATTERN}" ]]; then
  searched_files="$(
    find -maxdepth 1 -type f |
    grep -E "${SEARCH_PATTERN}" |
    grep -E '^.*\.md$'
  )"
else
  searched_files="$(find -maxdepth 1 -type f | grep -E '^.*\.md$' )"
fi

if [[ -z "${searched_files}" ]]; then
  echo "ファイルが存在しません"
  exit 1
fi
# ファイルがひとつだけならそのままvimを開く
if [[ "$(wc -l <<<"${searched_files}")" == 1 ]]; then
  vim "${searched_files}"
  exit 1
fi

# 普通に直列でループさせるので遅いのでサブシェルをbgにして並列にしている。。。
# 並列でやると順不同になるのでsortしてる。
memo_filename=$(
  for f in ${searched_files}; do
    fetch_markdown_info "${f}" &
  done |
  sort -k1 |
  peco  # 表示して１行に選択
)
# ファイル名のみを取得
memo_filename="${memo_filename%% *}"

[[ -z "${memo_filename}" ]] && return 1
[[ ! -f "${memo_filename}" ]] && return 1

vim "${memo_filename}"

exit 0
}

main "$@"
